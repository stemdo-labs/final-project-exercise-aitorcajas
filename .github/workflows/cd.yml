name: CD

on:
  workflow_call:
    inputs:
      desarrollo:
        type: string
        required: true
      entorno:
        type: string
        required: true
    
jobs:
  cd:
    runs-on: ubuntu-latest
    environment: ${{ inputs.entorno }}
    steps:
    - name: Checkout del repositorio
      uses: actions/checkout@v3

    - name: Instalar kubernetes
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

    - name: Instalar az CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb| sudo bash

    - name: Instalar kubelogin
      run: |
        sudo az aks install-cli

    - name: AZ Login
      run: |
        az login --service-principal -u ${{ secrets.ARM_CLIENT_ID }} -p ${{ secrets.ARM_CLIENT_SECRET }} --tenant ${{ secrets.ARM_TENANT_ID }}

    - name: Setear subscripción
      run: |
        az account set --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }}

    - name: AKS credentials
      run: |
        az aks get-credentials --resource-group final-project-common --name aksbootcampwe01 --overwrite-existing

    - name: Kubelogin
      run: |
        kubelogin convert-kubeconfig -l azurecli
      
    - name: ACR login
      run: |
        az acr login --name acajascr.azurecr.io
      
    - name: Crear secreto con las credenciales
      run: |
        if ! kubectl get secrets acr-secret -n ns-acajas > /dev/null 2>&1; then
          kubectl create secret docker-registry acr-secret --docker-server=acajascr.azurecr.io \
          --docker-username=${{ secrets.ARM_CLIENT_ID }} --docker-password=${{ secrets.ARM_CLIENT_SECRET }} \
          -n ns-acajas
        fi

    - name: Crear secreto para la conexión con la base de datos
      run: |
        if ! kubectl get secrets secretos-backend -n ns-acajas > /dev/null 2>&1 && [[ "${{ inputs.desarrollo }}" == *"backend"* ]]; then
          kubectl create secret generic secretos-backend --from-literal=SPRING_DB_HOST=${{vars.SPRING_DB_HOST}} \
          --from-literal=SPRING_DB_PORT=${{vars.SPRING_DB_PORT}} --from-literal=SPRING_DB_NAME=${{secrets.SPRING_DB_NAME}} \
          --from-literal=SPRING_DB_USER=${{secrets.SPRING_DB_USER}} --from-literal=SPRING_DB_PASSWORD=${{secrets.SPRING_DB_PASSWORD}} -n ns-acajas
        fi

    - name: Instalar Helm
      run: |
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh

    # - name: Login Harbor
    #   run: |
    #     helm registry login harbor.codeops.es -u ${{ secrets.HARBOR_USER }} -p ${{ secrets.HARBOR_PASS }}

    # - name: Instalar chart
    #   id: check_release
    #   run: |
    #     helm upgrade --install ${{ inputs.desarrollo }} oci://harbor.codeops.es/acajas/${{ inputs.desarrollo }} -f values.yml -n ns-acajas
    #   working-directory: templates

    - name: Login Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: acajascr.azurecr.io
        username: ${{ secrets.ARM_CLIENT_ID }}
        password: ${{ secrets.ARM_CLIENT_SECRET }}

    - name: Instalar chart
      run: |
        if [[ "${{ inputs.desarrollo }}" == *"backend"* ]]; then
          helm upgrade --install ${{ inputs.desarrollo }} oci://acajascr.azurecr.io/acajas/backend -f values.yml -n ns-acajas
        else
          helm upgrade --install ${{ inputs.desarrollo }} oci://acajascr.azurecr.io/acajas/frontend -f values.yml -n ns-acajas
          sleep 20s
          kubectl get all -n ns-acajas
        fi
      working-directory: templates