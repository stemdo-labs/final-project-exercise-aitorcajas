---
- name: Setup and configure VM2 with PostgreSQL
  hosts: [azure_vms]
  become: true

  vars:
    vm2_ip: "10.0.1.4"  # Cambia esto a la IP privada de VM2
    vm2_user: "admintest"

  tasks:
    # Paso 1: Instalar Ansible en VM1 si no está instalado
    - name: Ensure Ansible is installed
      apt:
        name: ansible
        state: present
        update_cache: yes

    # Paso 2: Copiar la clave pública SSH a VM2
    - name: Ensure SSH key exists
      command: ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
      args:
        creates: ~/.ssh/id_rsa

    - name: Copy SSH public key to VM2
      shell: |
        sshpass -p 'Password1234!' ssh-copy-id -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa.pub {{ vm2_user }}@{{ vm2_ip }}
      ignore_errors: yes

    # Paso 3: Crear inventario dinámicamente para VM2
    - name: Create Ansible inventory file
      copy:
        dest: ./inventory.ini
        content: |
          [azure_vms]
          vm2 ansible_host={{ vm2_ip }} ansible_user={{ vm2_user }} ansible_ssh_private_key_file=~/.ssh/id_rsa

- name: Install PostgreSQL on VM2
  hosts: azure_vms
  become: true
  gather_facts: yes

  vars:
    postgresql_version: "14"
    postgresql_service: "postgresql"

  tasks:
    - name: Update APT package index
      apt:
        update_cache: yes

    - name: Install PostgreSQL
      apt:
        name: "postgresql-{{ postgresql_version }}"
        state: present

    - name: Ensure PostgreSQL is running and enabled
      service:
        name: "{{ postgresql_service }}"
        state: started
        enabled: yes
