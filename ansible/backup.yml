---
- name: Backup de base de datos PostgreSQL y subida a Azure Blob Storage
  hosts: [bd]
  become: true
  vars:
    postgres_db: "acajasbd"
    postgres_user: "acajasbd"
    backup_file: "/tmp/{{ postgres_db }}-backup.sql.gz"
    storage_account_name: "staacajasdvfinlab"
    container_name: "backup"
    encryption_key: "password"
    local_backup_path: "/tmp/{{ postgres_db }}-backup-{{ ansible_date_time.iso8601 }}.sql.gz"

  tasks:
    - name: Instalar dependencias necesarias
      become: true
      apt:
        name:
          - python3
          - python3-pip
          - python3-dev
          - python3-venv
          - libpq-dev
          - curl
        state: present

    - name: Realizar dump de la base de datos PostgreSQL y cifrar el archivo
      become: true
      cron:
        name: "Backup diario de la base de datos"
        minute: "57"
        hour: "12"
        job: |
          pg_dump -U {{ postgres_user }} {{ postgres_db }} | gzip | openssl enc -aes-256-cbc -salt -out {{ backup_file }} -k "{{ encryption_key }}"
        state: 
          present

    - name: Verificar si el archivo de backup fue creado y cifrado
      stat:
        path: "{{ backup_file }}"
      register: backup_stat
      failed_when: false

    - name: Comprobar si el backup fue exitoso
      fail:
        msg: "El archivo de backup no se creó correctamente."
      when: not backup_stat.stat.exists

    - name: Fetch del archivo de backup a la máquina local
      fetch:
        src: "{{ backup_file }}"
        dest: "{{ local_backup_path }}"
        flat: yes
      delegate_to: localhost

    - name: Iniciar sesión en Azure CLI con Service Principal
      shell: |
        az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
      register: azure_login_output
      failed_when: "'ERROR' in azure_login_output.stdout"

    - name: Subir el archivo de backup a Azure Blob Storage
      shell: |
        az storage blob upload --account-name {{ storage_account_name }} --container-name {{ container_name }} --file {{ backup_file }} --name "{{ postgres_db }}-backup-{{ ansible_date_time.iso8601 }}.sql.gz"
      environment:
        AZURE_CLIENT_ID: "$AZURE_CLIENT_ID"
        AZURE_CLIENT_SECRET: "$AZURE_CLIENT_SECRET"
        AZURE_TENANT_ID: "$AZURE_TENANT_ID"
        AZURE_STORAGE_ACCOUNT: "{{ storage_account_name }}"
      register: upload_output
      failed_when: "'ERROR' in upload_output.stdout"
    
    - name: Eliminar el archivo de backup local
      file:
        path: "{{ backup_file }}"
        state: absent