---
- name: Descargar y restaurar base de datos PostgreSQL desde copia de seguridad
  hosts: localhost
  become: yes
  vars:
    backup_file: "/tmp/backup-desc.sql.gz"
    db_name: "acajasbd"
    db_user: "acajasbd"
    encryption_key: "password"
    db_password: password

  tasks:
    # - name: Copiar archivo a la m치quina remota
    #   ansible.builtin.copy:
    #     src: "{{ backup_file }}"
    #     dest: "{{ backup_file }}"
    #     mode: '0777'

    - name: Descifrar archivo
      shell: openssl enc -d -aes-256-cbc -salt -in /tmp/backup.sql.gz -out {{ backup_file }} -pass pass:{{encryption_key}}

    # - name: "Crear la base de datos si no existe"
    #   postgresql_db:
    #     state: present
    #     name: "{{ db_name }}"
    #     owner: "{{ db_user }}"
    #   become: yes
    #   become_user: postgres
  
    - name: "Restore the database using psql"
      command: >
        psql -U postgres -d {{ db_name }} -f {{ backup_file }}
      become: yes
      become_user: postgres
      environment:
        PGPASSWORD: "{{ db_password }}"


    - name: Verificar la restauraci칩n
      become: true
      shell: |
        psql "postgresql://{{ db_user }}:{{ db_password }}@localhost:5432/{{ db_name }}" -c "\dt"
      register: restore_check
      args:
        executable: /bin/bash

    # - name: Borrar directorio en la m치quina de control
    #   delegate_to: localhost
    #   ansible.builtin.command:
    #     cmd: rm -rf "{{ backup_file }}"

    - name: Mostrar resultado de la restauraci칩n
      debug:
        msg: "Tablas restauradas: {{ restore_check.stdout_lines }}"

    # - name: Eliminar el archivo de backup local
    #   file:
    #     path: "{{ backup_file }}"
    #     state: absent