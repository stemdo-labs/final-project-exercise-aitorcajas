---
- name: Descargar y restaurar base de datos PostgreSQL desde copia de seguridad
  hosts: [bd]
  become: yes
  vars:
    storage_account_name: "staacajasdvfinlab"
    container_name: "backup"
    backup_file: "/tmp/backup.dump"
    db_name: "acajasbd"
    db_user: "acajasbd"
    backup_path: "{{ db_name }}-backup.sql.gz"
    rg_name: "rg-acajas-dvfinlab"
    # sas_expiry: "2024-12-12T23:59:59Z"
    # db_password: "contrase침a_bd"

  tasks:
    - name: Iniciar sesi칩n en Azure CLI con Service Principal
      become: false
      shell: |
        az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
      register: azure_login_output
      failed_when: "'ERROR' in azure_login_output.stdout"

    - name: Verificar el resultado del login
      debug:
        msg: "Login successful: {{ azure_login_output.stdout }}"
      when: "'ERROR' not in azure_login_output.stdout"

    # - name: Obtener la clave de la cuenta de almacenamiento de Azure
    #   shell: |
    #     sudo az storage account keys list --resource-group {{ rg_name }} --account-name {{ storage_account_name }} --query '[0].value' -o tsv
    #   environment:
    #     AZURE_CLIENT_ID: "$AZURE_CLIENT_ID"
    #     AZURE_CLIENT_SECRET: "$AZURE_CLIENT_SECRET"
    #     AZURE_TENANT_ID: "$AZURE_TENANT_ID"
    #   register: storage_account_key
    #   changed_when: false

    - name: Descargar el backup desde Azure utilizando la clave de la cuenta
      become: false
      shell: |
        az storage blob download --account-name {{ storage_account_name }} -f {{ backup_file }} -c {{ container_name }} -n {{ backup_path }} --auth-mode login
      environment:
        AZURE_CLIENT_ID: "$AZURE_CLIENT_ID"
        AZURE_CLIENT_SECRET: "$AZURE_CLIENT_SECRET"
        AZURE_TENANT_ID: "$AZURE_TENANT_ID"
      register: download_status

    # - name: Verificar si la base de datos ya tiene tablas
    #   shell: |
    #     PGPASSWORD="{{ db_password }}" psql -U {{ db_user }} -d {{ db_name }} -c "\dt"
    #   register: db_check
    #   failed_when: db_check.stdout == ""
    #   args:
    #     executable: /bin/bash

    - name: Vaciar la base de datos si ya existe
      shell: |
        psql -U {{ db_user }} -d postgres -c "DROP DATABASE IF EXISTS {{ db_name }}; CREATE DATABASE {{ db_name }};"
      when: db_check.stdout != ""
      args:
        executable: /bin/bash

    - name: Restaurar la base de datos desde el archivo dump
      shell: |
        pg_restore -U {{ db_user }} -d {{ db_name }} {{ backup_file }}
      args:
        executable: /bin/bash

    - name: Verificar la restauraci칩n
      shell: |
        psql -U {{ db_user }} -d {{ db_name }} -c "\dt"
      register: restore_check
      args:
        executable: /bin/bash

    - name: Eliminar el archivo de backup local
      file:
        path: "{{ backup_file }}"
        state: absent

    # - name: Mostrar resultado de la restauraci칩n
    #   debug:
    #     msg: "Tablas restauradas: {{ restore_check.stdout_lines }}"