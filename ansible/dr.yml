---
- name: Descargar y restaurar base de datos PostgreSQL desde copia de seguridad
  hosts: [bd]
  become: yes
  vars:
    storage_account_name: "staacajasdvfinlab"
    container_name: "backup"
    backup_file: "/tmp/backup.dump"
    db_name: "acajasbd"
    db_user: "acajasbd"
    backup_path: "{{ db_name }}-backup.sql.gz"
    sas_expiry: "2024-12-12T23:59:59Z"
    # db_password: "contrase침a_bd"

  tasks:
    - name: Instalar AzCopy en Ubuntu/Debian
      apt:
        name: wget
        state: present
      become: yes

    - name: Descargar AzCopy
      shell: |
        wget https://aka.ms/downloadazcopy-v10-linux -O /tmp/azcopy.tar.gz
      become: yes

    - name: Extraer AzCopy
      shell: |
        tar -xvzf /tmp/azcopy.tar.gz -C /usr/local/bin/
      become: yes
      when: ansible_facts['os_family'] == 'Debian'

    - name: Iniciar sesi칩n en Azure CLI con Service Principal
      shell: |
        az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
      register: azure_login_output
      failed_when: "'ERROR' in azure_login_output.stdout"

    - name: Generar SAS Token para el contenedor de Azure
      shell: |
        az storage container generate-sas \
          --account-name {{ storage_account_name }} \
          --name {{ container_name }} \
          --permissions rw \
          --expiry {{ sas_expiry }} \
          --https-only \
          --output tsv
      register: sas_token_output

    - name: Descargar el backup desde Azure usando AzCopy
      shell: |
        azcopy copy "https://{{ storage_account_name }}.blob.core.windows.net/{{ container_name }}/{{ backup_path }}?{{ sas_token_output.stdout }}" "{{ backup_file }}" --recursive
      register: download_status
      environment:
        AZCOPY_SPAUTH: "{{ sas_token_output.stdout }}"

    # - name: Verificar si la base de datos ya tiene tablas
    #   shell: |
    #     PGPASSWORD="{{ db_password }}" psql -U {{ db_user }} -d {{ db_name }} -c "\dt"
    #   register: db_check
    #   failed_when: db_check.stdout == ""
    #   args:
    #     executable: /bin/bash

    - name: Vaciar la base de datos si ya existe
      shell: |
        psql -U {{ db_user }} -d postgres -c "DROP DATABASE IF EXISTS {{ db_name }}; CREATE DATABASE {{ db_name }};"
      when: db_check.stdout != ""
      args:
        executable: /bin/bash

    - name: Restaurar la base de datos desde el archivo dump
      shell: |
        pg_restore -U {{ db_user }} -d {{ db_name }} {{ backup_file }}
      args:
        executable: /bin/bash

    - name: Verificar la restauraci칩n
      shell: |
        psql -U {{ db_user }} -d {{ db_name }} -c "\dt"
      register: restore_check
      args:
        executable: /bin/bash

    - name: Eliminar el archivo de backup local
      file:
        path: "{{ backup_file }}"
        state: absent

    # - name: Mostrar resultado de la restauraci칩n
    #   debug:
    #     msg: "Tablas restauradas: {{ restore_check.stdout_lines }}"